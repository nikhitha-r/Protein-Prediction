class Genome:

    def __init__(self, genome):
        """
        Initialize the Genome class with the provided genome sequence.

        :param genome: String with the genome sequence.
        """
        self.genome_seq = genome
        self.amino_dict = {
            'L' : ['CTC', 'CTT', 'CTA', 'CTG', 'TTA', 'TTG'],
            'S' : ['TCA', 'TCT', 'TCC', 'TCG', 'AGC', 'AGT'],
            'R' : ['CGA', 'CGC', 'CGT', 'CGG', 'AGA', 'AGG'],
            'V' : ['GTA', 'GTG', 'GTC', 'GTT'],
            'P' : ['CCC', 'CCA', 'CCG', 'CCT'],
            'T' : ['ACC', 'ACG', 'ACT', 'ACA'],
            'A' : ['GCA', 'GCC', 'GCG', 'GCT'],
            'G' : ['GGA', 'GGC', 'GGT', 'GGG'],
            'I' : ['ATA', 'ATC', 'ATT'],
            'F' : ['TTT', 'TTC'],
            'Y' : ['TAT', 'TAC'],
            'H' : ['CAC', 'CAT'],
            'Q' : ['CAG', 'CAA'],
            'N' : ['AAC', 'AAT'],
            'K' : ['AAA', 'AAG'],
            'D' : ['GAC', 'GAT'],
            'E' : ['GAA', 'GAG'],
            'C' : ['TGC', 'TGT'],
            'M' : ['ATG'],
            'W' : ['TGG']

        }
        #pass

    def get_gc_content(self):
        """
        Return the GC content of the genome sequence, i.e. the combined
        fraction of 'G' and 'C' in the entire genome sequence.

        :return: GC content (float, rounded to 6 digits)
        """
        self.count = {}
        for ch in self.genome_seq:
            if ch not in self.count :
                self.count [ch] = 1
            else:
                self.count [ch] += 1
        gc_content = (self.count ["G"] + self.count ["C"])/ (self.count ["A"] + self.count ["T"] + self.count ["G"] + self.count ["C"] ) 
        return float("{:.6f}".format(gc_content))
        #return 0.123456

    def get_codon_dist(self):
        """
        Return the expected codon distribution (fractions) based on the
        distribution (fractions) of the four different nucleotides (ATGC).

        :return: Tree-like structure made out of nested dictionaries. The nodes
                 represent the different nucleotides and the path down the tree
                 forms the corresponding codons. The leafs contain the expected
                 codon frequencies (rounded to 6 digits).
        """
        codon_dict = {}
        seq = self.genome_seq
        seq_len = len(seq)
        tot_frequency = self.get_gc_content()
        tot_frequency = self.count
        for i in range(seq_len):
            for j in range(i, seq_len, 3):
                sub_seq = seq[j:j+3]
                #for ch in sub_seq:
                c = 0
                if len(sub_seq) == 3:
                    if sub_seq[c] not in codon_dict:
                        codon_dict[sub_seq[c]] = {}

                    if sub_seq[c+1] not in codon_dict[sub_seq[c]]:
                        codon_dict[sub_seq[c]][sub_seq[c+1]] = {}

                    if sub_seq[c+2] not in codon_dict[sub_seq[c]][sub_seq[c+1]]:
                        res = float("{:.6f}".format(tot_frequency[sub_seq[c]]*tot_frequency[sub_seq[c+1]]*tot_frequency[sub_seq[c+2]] / pow(seq_len, 3)))
                        codon_dict[sub_seq[c]][sub_seq[c+1]][sub_seq[c+2]] = res
        return codon_dict
        #return {'A': {'A': {'A': 0.123456}}}

    def get_amino_acid_dist(self):
        """
        Return the expected amino acid distribution (fractions) based on the
        expected distribution (fractions) of the different codons.

        :return: Dictionary that contains the expected amino acid distribution.
                 The keys are the 20 different amino acids, the values are the
                 corresponding frequencies (rounded to 6 digits).
        """
        codon_dict = self.get_codon_dist()
        aa_dict = {}
        for key in self.amino_dict:
            seq_tot = 0
            seq_list = self.amino_dict[key]
            for seq in seq_list:
                seq_val = codon_dict[seq[0]][seq[1]][seq[2]]
                seq_tot += seq_val
            aa_dict[key] = seq_tot
        factor = 1/sum(aa_dict.values())
        for k in aa_dict:
            aa_dict[k] = float("{:.6f}".format(aa_dict[k] * factor))
        return aa_dict
        #return {'A': 0.123456}
"""
sequence = "TTATTTAAGAGCAATGGCCAACAAGTAAAAACGGTTAGCAGGGTTAGGGATATGTTTGTTGACTCTAAAGAAGAGTACGCAAAGCACTATCAAGAAAAGTATTACAATGAGTATTGTCCGTTTTACAGAGATCTCCCGCCTGCATGGGTAGCCATTGAGTTAATGACTTTCGGCAACGTAGTGAAGTTAATTCAAAACATCAGTGATGATAAAATTCAATCACTTAAGATGGATAGATTTTCTAAGAAGTTCAATATTCAGAAATTTCAGACATTAATTAGTTGGATGAATGTGCTGCACCAGATGAGAAACTACTGTGGGCATCATAACCGACTGTTTAATCGAAACTTCCCTGCTCCAACAGCGATTAAAAAGAGCTTGTCTGATGCAATTCCTCTTGTCAGGACCAAACCAAATCCAGATAAGCGTGAAGAGGATCAGTTAAACCGACTTTATACAGCTCTTGCTGCATTACAATGTATATATTCAGGGCTTGGTTTCGATGAAAAAATAGGACCAAAAATCTCTGATTTATTTGATAATTATACAACAACACAGCGGTTTAGCTTATCAATGGGTTTCCCTAATGGTTGGAAAGAAGAGCCGCTTTTTTTTGATTTATAATCGCTATACTTAACATAAAACCCGTTCTACGAATCGTAAAAGGTCGCCTATTTAGGTGGCCTTTTTTTATGAAAACTGTTTTTTAAGTGATAAAAATGTCGTTTGTCCTAACGAAATAGTATTTTTAACAGGCTTATTCAGGCGTTTTGATTTTTAGCTATCTGGTAATATTTAATTATTTTTTATTGGAGTTTGTATATGCCGCCACCTAAAGGTCGAAGTTTTCCATTTGCACCGCGTCACTCTGCTGATTGGTTAGTGAGTCATGTAACGTATGACCAAGCCGTTGATATGTTTTTTAATCAGACCGCAACACAACAGAATTTGGGGCATGATCCTTTAGTTTATTCAAAAGTATTTAGAGGTGTGACATACGCAACGCTCCAAGAAGCTCAACAAGTGTTTACTGAAACGATGAATGCAGAGTATGAAGTGAGAGAGCAAAGGGATTTAGCAGATGAAAATCGAGGGTGTAAGGCTTCTAAAATTCTCAATGATAATATTCGGAATCGTATTGTACCAACAGAGGATGGTTTAGAGTCATTAACTGCATATCGAAAGCCTTTTGGTGAAAAGTGTGTATCTCCTCTTTCTTTGTTTACCAAATCGTTAAATGGCGGTTCAAACAGTCATATTCAAGCAAACGAAACTCAAGCTCAATTAGTTACGCAACAAGCTTATGATTTCCCACTCGTCACTAAAGGTTCTAAAGCGATTCAGGCATTAGATGATTCTTGGGGTTTACAGTGCTCTTTAGAGGATGAATTAAACCAAAATCACCAAGATGTTGTTATTTTAGATTTGGAAGACTCACATAAATTATTAAATAATTTTTGGGTGGATTTAGGCAAAGATACAGCGTTAATAGCAACAAGTTTAAATACGGCTAACGGTTGGTTTCAACATACAACACCGATATTTGATGCTAAAGGTTTAGTTAAGCAATTCGGCGATATAAATATTAAAGCGGATATTGTAGAGAGTAAGGGGAAACAGTTTATTGCTTTCTCTGGTAAGAAGAACGGCAAAGAAATTTAACACGCACTTGTTAATGGCACTCGAATTAACATGAACGGTAAGAAGTACCCAATTAACAGCCCTAAAGTTCAACAAGTCGGTTTGAGTCCTAAAGCACGAGCAAATGGATTTAAAGGCGCAGGTGTATTGACGTTTGTGGTATCGGCAGCGATAGCAACGACAGATCTTGTTTTTAAAGACGATTATCACTTAGTTGATTGGTTCGGTAATGTTGGGGCAGATATGTTTAAGGCATTGCTACAGTTTGGTGCAGGAGAGGCTATATTGTTTGGAATTATTGCGATGACTGGTTACGTTACTCTGGGCTTGATTGCTGTGTTTTTTGTCTATGTGTCTATTGAGTGGATATGGAGTGAATACAAGGTAAATGATGAGGTAGTTAAGGGATTAGAAAGTGTTATCAGTTAAAATGAGGTTTTTAGGAATAGTATTTATACCTTTATTGATTTTACTTTGGTGGATACCTACAAATGGAGTCTTGGGGGATTACCAAGATTTATTAAATCAGACAGATGAAGTTAGATTATCACTGATAACATTAATCGTCCCCATTGGTGGTTTTATCCCTTTACTTATTTCCGTTGCTTTAATTTCTATTGCTATTTATTCGGGGAAACAAGCTCGTTTGGTCATTGGTGAAAAATGGACTAGTACTATCAATAGAACGTGTATTTATAGCATGATATTAGGTGTAGTATTTGCGGTTGTATTTGCACTATATTGTATAAAATTGCTTGATGAAAACGGTTATGAATACAGTTATAACCTAACCCAAATAACCCCGACAGGTATTCATTTAATGTATGTAAAATCACACAAAGAATAGAAACAAAAAAGCCACTCAAAAGAGTGGCTTTTTTGTCTATGAACCAGAGGATCATAAAATTGATCATTGAGATCTTGAGCATTTAGCCGTAACCTTATGCCCAGATGTGAAAAAACCAAGCCTGCAAGCTTGGTTTTTTCGAAATACTTAACTACGTTTAGACGGCGTTGTAAGTCCTTTCATGATAGATCATATCACATAAGAACTGCAAGTATTTCCAAGCAATCAGTGGTTGGGTTTAGAGTCACTAGGGTTGTGGGACAGCATCATGCGGTTGGTTTTCATACCATATTTCGCCCAGATACTGGACGAGAGACTAGCGTAACATCCGATAACGCACACCAAATGAGTGGACTGAAGCAAGAACTAGCGTAAGCAGCTAGGCAAAGAGGCTTGTAGATTGGGGAAACCCTTGCAAGGTACTGATGCAGAGGTCGGCAGAGAACGGTGAGGATGGGGGCAATACAGCCCGTAATCTCTGCACTTGAATAGTGTATTAGAATTCAAGCGAATGATGGCGATGAACGGCTCCAGTCGGCAAGCAATCAGGGTTCACACTAGAGTGATAAACTTAGCGAAAGCGGTTATCCTCTAGGGTGAGTATTACCGAAATCTAGCTCAAAACTCACCTATCAGCATACATGCCGACTTCTTTTGCTCTTCAATTCAAAAAGAATTAAAAAGAAAATATTAAGAGCTGCACGATTAGAAATGAAAGTTGCCGCAACGAGCATAAGCGAGTTAAGCCCACTTTCTTTTCTAATGTGCGAACAAGCGAAGCGCGTTAGTTGGGTCGATTATCTTCTTTTATGGATCGATGCTGACCAACTGAATGTGCTTTTTTCTTCTTTCGGTAACTTTTTCAATTCCGCTCTCGCTGCCCTTGCTATGGTGAGTCGTTTTAATTTTTCTCTGTTCCTTTTGAAAATCGTTTCAAAGGCTTGGTCTCTATAATCTTCACCGTTGCTGCTGCAGAGTGAATCTATAAGAGCAAAGTCTCTTGGCTTGAGTCCGTATACTTTTTCATAAATTGCTTTGGCCGCTTCTTTTCGTGCCACTCCTTTTTCTATTTGTAGTTCAATAAGAGTGCGGTCTTCTTGAGTAAATCGTCTTTTCTTCATTCTCTTTTTTGCTCTTAGGTTTCAAAGGACATCCTTTGGCGCGGCATGTTTTTCCAAATACGTATGTAGAGGGTGAAAACGTGCCCGTCGTGCCTATCTAAAAAATAGATATCACTGAGTAATCAATAATAAAATGCTAACTCCTTGTATTAATACGTTAATTTATGGGTAACGTTATTTTTTAAAGAAACTATCCAAAAGCGTCTTTTTTCCTTCTTTTTTCGTTGGTGTTAATACCGGCTCTTTATGCTCTCTTATCATGGCTTCTAGTTGGTCAAAACGAGTGGCGATGTAATGTAAGTCATCATCAAGCATTTCTCTTTCGTAGGCGTAATACGATTTATCAATTGAGTGATGCACTCTATCGCCATGAGTTTGATACAAATCCCTTTTATAGGCGAACAAACCTCTTACTAGCAACGCCCTTAACAGTTCTGCTTTATCTTTATGCGTGTCGTTTAACAGCTCTTCAATTTCAGCATTCACTCGACCATCCACTCGAACGGACACCAAATGAGTCTTGGATTTTGGTTTATTCATTTTCTAGTTTTCTCTTTTGCCTAATTCGATAAAGAACCGTCTTCAAATAGTCTCTCGATACCGTGATATTTTTTGTCTTTAAAAACGCAACGATGTGCTCTAGTGAGATACCTTCACTCATCAAGATGGTTATCACGTCATATAACTCCGTAATGACGGCGGTTTTAGATTTCGTTTGATGCTTTTTCGTGTACGAAAGAAGCTCTTTTTCTAACGGTGTTTTCTTTTTCACTGAATACTTTATTGATTACTGATTGATACTTTAGAGACTAGCAATAAAAAAGAAGAACGAGAATGGTTATTTCAGTTGGGCTGAAATTGGCATGATTTATCTTAGTAACCTACCTATAAACTCATTGATTCAATGGGTTAGCTTTTTAATGTTAGTTACGTTGTGATTACCCGTTGATTTCTATTTTCAAGATAGGCACGACGGGGACGTTTTCACCCCCTGCTACGCATTGGATAAAAACATCCCGTGCCAAAGGTGAAACCTTTGAAACCCTGACGCACTTCGTTTGTCTCCAGTACGCCCAAAAAAGCCAGCTACGCTTCGGGCTTTTTCGAGCGCACCGGCTAATTGTTGAAAATAGACGTTACAGGGTGATTATTGATTGAAACGGATTGTGATTTTATTGCCCTGTAAATCGCCTAGAAAGCGTCATAAACTTTCAAACTGGTTTTGGGGTATGTTGGTGTGGTTTATATCTTAAAAACGCCTCTATGGGCTTCTGAGGCTGCGAAGGCATGGTTTTTATAGGCTAACTTACGGATTTAACATAAGGGGCATAATGAACACCAATTTTGTGCGTACCTAGATTCAACACAAGACAACCTACTTCACCCGCGGGGATCTTAGGTTCTGCGTTACGGAGTCACGTGATTGAAAATAACTGGACTCTGTATATGTAACATGTATAATTAACTTAACAATGACTTCCTCCTGAACGCAAGTTCGTAAGAGTGGAAGTTTTTTTTGCCTAGAGAAAATGGATATGACTACGGCTCCCCTCGTTCCTTATAAAAAACCTTACCTATCTAGTTCTCAGTTATGTAAAAAACTCATAGACCAAGGGCTAATCATTGATGATGAAGATTTTGCTGAAAAAGTCTTAAATCGTTGTAGTTACTATCGATTTAAAGCTTATCTATCACCCTTTAAAGATAAAGGGACTAAGAAATTTTCAGAACATACTACGTTTCATAATGGTTATGAACTTTATATGTTTGATAGTGAGTTGCGAAGTTATATCTTTGATATAATTGAAAAAGTTGAGATAGGCGTTCGTTCGGCGCTAGATCAGTGGATTACGAAACAAACAGATAATCCATTCTGGTATTTAGATGCATCT"
genome = Genome(sequence)
gc = genome.get_amino_acid_dist()
"""